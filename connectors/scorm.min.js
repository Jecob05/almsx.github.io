'use strict';
(function() {
  /**
   * @param {!Object} a
   * @return {?}
   */
  function d(a) {
    /** @type {number} */
    var i = 0;
    return function() {
      return i < a.length ? {
        done : false,
        value : a[i++]
      } : {
        done : true
      };
    };
  }
  /**
   * @param {!Object} target
   * @return {?}
   */
  function require(target) {
    var condition = "undefined" != typeof Symbol && Symbol.iterator && target[Symbol.iterator];
    return condition ? condition.call(target) : {
      next : d(target)
    };
  }
  /**
   * @param {!Object} s
   * @return {?}
   */
  function replace(s) {
    if (!(s instanceof Array)) {
      s = require(s);
      var item;
      /** @type {!Array} */
      var values = [];
      for (; !(item = s.next()).done;) {
        values.push(item.value);
      }
      /** @type {!Array} */
      s = values;
    }
    return s;
  }
  /**
   * @param {!Function} obj
   * @param {!Function} e
   * @return {undefined}
   */
  function create(obj, e) {
    obj.prototype = spawn(e.prototype);
    /** @type {!Function} */
    obj.prototype.constructor = obj;
    if (_) {
      _(obj, e);
    } else {
      var key;
      for (key in e) {
        if ("prototype" != key) {
          if (Object.defineProperties) {
            /** @type {(ObjectPropertyDescriptor<?>|undefined)} */
            var d = Object.getOwnPropertyDescriptor(e, key);
            if (d) {
              Object.defineProperty(obj, key, d);
            }
          } else {
            obj[key] = e[key];
          }
        }
      }
    }
  }
  /**
   * @param {!Array} result
   * @return {undefined}
   */
  function addMethods(result) {
    /** @type {!Array} */
    result = ["object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global, result];
    /** @type {number} */
    var i = 0;
    for (; i < result.length; ++i) {
      var root = result[i];
      if (root && root.Math == Math) {
        break;
      }
    }
  }
  /**
   * @param {!Object} a
   * @param {!Object} b
   * @return {undefined}
   */
  function F(a, b) {
    /** @type {!Object} */
    this.a = a;
    defineProperty(this, "description", {
      configurable : true,
      writable : true,
      value : b
    });
  }
  /**
   * @param {string} a
   * @param {?} fn
   * @return {undefined}
   */
  function call(a, fn) {
    /** @type {!Array} */
    var array = [];
    /** @type {number} */
    var i = 1;
    for (; i < arguments.length; ++i) {
      array[i - 1] = arguments[i];
    }
    console.warn.apply(console, [a].concat(replace(array)));
  }
  /**
   * @param {!Object} a
   * @param {?} lineNumber
   * @return {undefined}
   */
  function log(a, lineNumber) {
    /** @type {!Array} */
    var array = [];
    /** @type {number} */
    var i = 1;
    for (; i < arguments.length; ++i) {
      array[i - 1] = arguments[i];
    }
    console.error.apply(console, [a].concat(replace(array)));
  }
  /**
   * @param {?} accelerometer_data
   * @return {?}
   */
  function callback(accelerometer_data) {
    if (!accelerometer_data) {
      log("Assertion failed");
    }
    return accelerometer_data;
  }
  /**
   * @param {!Object} a
   * @param {string} c
   * @param {!Object} t
   * @param {?} i
   * @param {number} b
   * @return {undefined}
   */
  function m(a, c, t, i, b) {
    /** @type {!Object} */
    this.a = a;
    /** @type {string} */
    this.g = c;
    /** @type {!Object} */
    this.type = t;
    /** @type {boolean} */
    this.capture = !!i;
    this.b = void 0 === b ? null : b;
    /** @type {number} */
    this.key = ++nextKey;
  }
  /**
   * @return {undefined}
   */
  function lang() {
  }
  /**
   * @return {undefined}
   */
  function textarea() {
  }
  /**
   * @param {number} progressOld
   * @param {number} progressNew
   * @return {?}
   */
  function dispatchEvent(progressOld, progressNew) {
    return progressOld > progressNew ? 1 : progressOld < progressNew ? -1 : 0;
  }
  /**
   * @return {undefined}
   */
  function Unitcell() {
    /** @type {null} */
    this.b = this.a = this.c = null;
  }
  /**
   * @param {!Object} parent
   * @param {number} name
   * @return {?}
   */
  function fn(parent, name) {
    if (0 == name) {
      return parent.b || [];
    }
    if (!parent.a) {
      return call("Priority array values are zero"), [];
    }
    if (!(name in parent.a)) {
      return [];
    }
    parent = get(parent, name);
    return parent ? parent : (call("Priority array values are zero"), []);
  }
  /**
   * @param {!Object} obj
   * @return {?}
   */
  function parse(obj) {
    if (!obj.a) {
      return obj.b ? obj.b.slice() : [];
    }
    /** @type {!Array} */
    var sequence_messages = [];
    var object = callback(obj.c);
    /** @type {number} */
    var index = 0;
    for (; index < object.length; ++index) {
      var array = get(obj, object[index]);
      if (array) {
        sequence_messages.push.apply(sequence_messages, replace(array));
      }
    }
    return sequence_messages;
  }
  /**
   * @param {!Object} obj
   * @param {?} key
   * @return {?}
   */
  function get(obj, key) {
    return 0 == key ? obj.b : callback(obj.a)[key];
  }
  /**
   * @return {undefined}
   */
  function a() {
    /** @type {null} */
    this.a = null;
  }
  /**
   * @param {(number|string)} o
   * @param {?} params
   * @return {undefined}
   */
  function Input(o, params) {
    if (o.a) {
      var h = parse(o.a);
      var i = h.length;
      /** @type {number} */
      var j = 0;
      for (; j < i; ++j) {
        var a = h[j];
        if (-1 != parse(o.a).indexOf(a)) {
          try {
            a.v.apply(a.context, [params]);
          } catch (_data) {
            error(_data);
          }
        }
      }
    }
  }
  /**
   * @param {?} d
   * @return {undefined}
   */
  function error(d) {
    var b = d.stack || d.toString();
    if (0 > String(b).indexOf(d.message)) {
      log(d.message);
    }
    log(b);
  }
  /**
   * @param {?} values
   * @param {!Object} opts
   * @param {?} arg
   * @param {?} data
   * @param {?} f
   * @param {?} c
   * @return {undefined}
   */
  function Matrix(values, opts, arg, data, f, c) {
    m.call(this, values, arg, data, f, c);
    /** @type {!Object} */
    this.proxy = opts;
    /** @type {boolean} */
    this.c = this.u = false;
  }
  /**
   * @param {!Object} m
   * @return {undefined}
   */
  function comparator(m) {
    /** @type {boolean} */
    m.c = true;
    /** @type {null} */
    m.a = null;
    /** @type {null} */
    m.proxy = null;
    /** @type {null} */
    m.g = null;
    /** @type {null} */
    m.b = null;
  }
  /**
   * @param {string} value
   * @return {undefined}
   */
  function t(value) {
    /** @type {string} */
    this.c = value;
    this.a = {};
    /** @type {number} */
    this.b = 0;
  }
  /**
   * @param {!Array} m
   * @param {!Object} el
   * @param {boolean} a
   * @param {!Object} b
   * @return {?}
   */
  function f(m, el, a, b) {
    /** @type {number} */
    var i = 0;
    for (; i < m.length; ++i) {
      var e = m[i];
      if (!e.c && e.a == el && e.capture == !!a && e.b == b) {
        return i;
      }
    }
    return -1;
  }
  /**
   * @return {?}
   */
  function watch() {
    if (!client.addEventListener || !Object.defineProperty) {
      return false;
    }
    /** @type {boolean} */
    var raw = false;
    /** @type {!Object} */
    var options = Object.defineProperty({}, "passive", {
      get : function() {
        /** @type {boolean} */
        raw = true;
      }
    });
    client.addEventListener("test", Function.prototype, options);
    client.removeEventListener("test", Function.prototype, options);
    return raw;
  }
  /**
   * @param {!Object} value
   * @return {?}
   */
  function parseInt(value) {
    value = value[p];
    return value instanceof t ? value : null;
  }
  /**
   * @param {!Object} data
   * @return {undefined}
   */
  function filter(data) {
    if (data && !data.c) {
      var m = data.g;
      var p = data.type;
      var key = data.proxy;
      if (m.removeEventListener) {
        m.removeEventListener(p, key, data.capture);
      }
      if (p = parseInt(m)) {
        key = data.type;
        if (key in p.a) {
          var e = p.a[key];
          var f = e.indexOf(data);
          if (0 <= f) {
            e.splice(f, 1);
            comparator(data);
            if (0 == p.a[key].length) {
              delete p.a[key];
              --p.b;
            }
          }
        }
        if (0 == p.b) {
          /** @type {null} */
          m[p] = null;
        }
      } else {
        comparator(data);
      }
    }
  }
  /**
   * @param {!Object} c
   * @return {?}
   */
  function handler(c) {
    var b = c.a;
    var a = c.b;
    var u = c.u;
    var l = a ? b.bind(a) : b;
    return u ? function(canCreateDiscussions) {
      /** @type {!Array} */
      var message = [];
      /** @type {number} */
      var i = 0;
      for (; i < arguments.length; ++i) {
        message[i] = arguments[i];
      }
      l.apply(null, replace(message));
      filter(c);
    } : l;
  }
  /**
   * @param {string} name
   * @param {!Object} f
   * @return {?}
   */
  function addEventListener(name, f) {
    /** @type {!Window} */
    var b = window;
    /** @type {(null|undefined)} */
    var value = void 0 === value ? null : value;
    var c = parseInt(b);
    if (!c) {
      c = new t(b);
      b[p] = c;
    }
    f = c.add(name, f, false, false, value);
    if (f.proxy) {
      return f;
    }
    value = handler(f);
    f.proxy = value;
    if (b.addEventListener) {
      if (!(void 0 !== result)) {
        result = watch();
      }
      /** @type {(boolean|undefined)} */
      c = result ? void 0 : false;
      if (!(void 0 !== c)) {
        /** @type {boolean} */
        c = false;
      }
      b.addEventListener(name.toString(), value, c);
    } else {
      throw Error("addEventListener is unavailable.");
    }
    return f;
  }
  /**
   * @param {!Window} host
   * @return {undefined}
   */
  function resolve(host) {
    /** @type {!Element} */
    var b = document.createElement("a");
    /** @type {string} */
    b.href = "goodbye.html";
    host.location.replace(b.href);
  }
  /**
   * @return {undefined}
   */
  function click() {
    try {
      if (window == window.top) {
        window.open("", "_self", "");
        window.close();
      } else {
        resolve(window);
      }
    } catch (a) {
      resolve(window.top);
    }
  }
  /**
   * @return {undefined}
   */
  function FloatRange() {
  }
  /**
   * @param {number} num
   * @return {?}
   */
  function c(num) {
    return {
      B : Math.floor(num / 3600),
      F : Math.floor(num % 3600 / 60),
      H : Math.floor(num % 60),
      X : num - Math.floor(num)
    };
  }
  /**
   * @param {number} g
   * @return {?}
   */
  function map(g) {
    return 10 > g ? "0" + g : g;
  }
  /**
   * @param {!Object} f
   * @return {?}
   */
  function init(f) {
    f = c(f);
    return "PT" + f.B + "H" + f.F + "M" + f.H + "S";
  }
  /**
   * @param {!Object} t
   * @return {?}
   */
  function expect(t) {
    t = c(t);
    return map(t.B) + ":" + map(t.F) + ":" + map(t.H);
  }
  /**
   * @param {!Function} attrName
   * @param {?} opt_errorDetails
   * @return {undefined}
   */
  function message(attrName, opt_errorDetails) {
    /** @type {!Function} */
    this.T = attrName;
    this.U = opt_errorDetails;
    /** @type {boolean} */
    this.c = false;
    /** @type {null} */
    this.l = null;
    /** @type {number} */
    this.G = 0;
    /** @type {null} */
    this.a = null;
    /** @type {!Array} */
    this.g = [];
    /** @type {!Array} */
    this.b = [];
    this.D = {
      S : new a,
      R : new a
    };
  }
  /**
   * @param {!Object} data
   * @param {!Object} a
   * @return {undefined}
   */
  function test(data, a) {
    /** @type {!Object} */
    data.l = a;
    /** @type {boolean} */
    data.c = true;
    /** @type {number} */
    data.G = Date.now();
    Input(data.D.S, a.getTitle());
    a.onClosePlayerRequest.add(function() {
      start(data);
      click();
    });
    data.b = a.getCurrentSectionsStateProgress();
    a.onSelectedSectionChange.add(function() {
      if (data.l && data.a) {
        var n = data.l.getSuspendData();
        push(data.a).J(n);
      }
    });
    a.onSectionProgressChange.add(function() {
      var id = a.getCurrentSectionIndex();
      if (0 <= id && !data.b[id] && 1 <= a.getCurrentSectionProgress()) {
        callback(data.a);
        /** @type {boolean} */
        data.b[id] = true;
        update(data);
      }
    });
    update(data);
  }
  /**
   * @param {!Object} item
   * @return {undefined}
   */
  function start(item) {
    if (item.g) {
      var c = require(item.g);
      var result = c.next();
      for (; !result.done; result = c.next()) {
        filter(result.value);
      }
    }
    if (item.c) {
      /** @type {boolean} */
      item.c = false;
      /** @type {number} */
      c = Date.now() - item.G;
      result = callback(item.a);
      push(result).I(c);
    }
    Input(item.D.R);
    callback(item.a).b();
  }
  /**
   * @param {!Object} parent
   * @return {undefined}
   */
  function update(parent) {
    var i = parent.b.filter(function(namesArrayOfFilesFixed) {
      return namesArrayOfFilesFixed;
    }).length;
    var r = callback(parent.a);
    equal(r, i / parent.b.length);
    r.c(null, i >= parent.U.O);
    push(r).h();
  }
  /**
   * @param {!Object} c
   * @param {string} d
   * @return {?}
   */
  function $(c, d) {
    try {
      /** @type {number} */
      var c = 0;
      for (; 255 > c; ++c) {
        if (c[d]) {
          return c[d];
        }
        var w = c.parent;
        if (!w || c == w) {
          break;
        }
        c = w;
      }
    } catch (e) {
    }
    return null;
  }
  /**
   * @param {string} obj
   * @return {?}
   */
  function run(obj) {
    /** @type {!Window} */
    var w = window;
    return $(w, obj) || w.opener && $(w.opener, obj);
  }
  /**
   * @param {!Object} y
   * @param {string} value
   * @return {undefined}
   */
  function Date(y, value) {
    /** @type {!Object} */
    this.a = y;
    /** @type {number} */
    this.b = 0;
    /** @type {string} */
    this.c = value;
  }
  /**
   * @param {boolean} i
   * @return {undefined}
   */
  function value(i) {
    var ms_since_1970 = run("API");
    this.a = ms_since_1970 ? new Date(ms_since_1970, i) : null;
    /** @type {boolean} */
    this.b = false;
  }
  /**
   * @return {undefined}
   */
  function r() {
    /** @type {null} */
    this.a = null;
  }
  /**
   * @param {(number|string)} y
   * @param {!Function} props
   * @return {undefined}
   */
  function equal(y, props) {
    push(y).w(props);
  }
  /**
   * @param {(number|string)} val
   * @return {?}
   */
  function push(val) {
    if (!val.a) {
      throw Error("Connector not created");
    }
    return val.a;
  }
  /**
   * @param {?} elem
   * @param {number} fn
   * @return {undefined}
   */
  function ctx(elem, fn) {
    /** @type {null} */
    this.a = null;
    /** @type {number} */
    this.l = fn;
  }
  /**
   * @param {!Object} a
   * @param {string} c
   * @param {string} g
   * @return {undefined}
   */
  function Color(a, c, g) {
    /** @type {!Object} */
    this.a = a;
    /** @type {string} */
    this.c = c;
    /** @type {number} */
    this.b = 0;
    /** @type {string} */
    this.g = g;
  }
  /**
   * @param {(!Function|RegExp|string)} a
   * @param {(!Function|RegExp|string)} b
   * @return {undefined}
   */
  function BenchmarkImpl(a, b) {
    var code = run("API_1484_11");
    this.a = code ? new Color(code, a, b) : null;
    /** @type {boolean} */
    this.b = false;
  }
  /**
   * @param {!Object} a
   * @param {number} b
   * @return {undefined}
   */
  function A(a, b) {
    /** @type {null} */
    this.a = null;
    this.l = void 0 === b ? "2" : b;
    /** @type {!Object} */
    this.o = a;
  }
  /**
   * @param {!Object} data
   * @return {undefined}
   */
  function Group(data) {
    message.call(this, data.N, data);
    /** @type {!Object} */
    this.K = data;
  }
  /**
   * @param {!Object} options
   * @return {?}
   */
  function add(options) {
    return new Group({
      N : options.apiVersion,
      flags : options.flags,
      W : options.contentId,
      O : options.chaptersCount,
      P : options.edition
    });
  }
  var args;
  /** @type {!Function} */
  var spawn = "function" == typeof Object.create ? Object.create : function(a) {
    /**
     * @return {undefined}
     */
    function GUI() {
    }
    /** @type {!Object} */
    GUI.prototype = a;
    return new GUI;
  };
  var func;
  if ("function" == typeof Object.setPrototypeOf) {
    /** @type {function(!Object, ?): !Object} */
    func = Object.setPrototypeOf;
  } else {
    var out;
    a: {
      var metadata = {
        M : true
      };
      var options = {};
      try {
        options.__proto__ = metadata;
        out = options.M;
        break a;
      } catch (a) {
      }
      /** @type {boolean} */
      out = false;
    }
    /** @type {(function(!Object, !Function): ?|null)} */
    func = out ? function(a, b) {
      /** @type {!Function} */
      a.__proto__ = b;
      if (a.__proto__ !== b) {
        throw new TypeError(a + " is not extensible");
      }
      return a;
    } : null;
  }
  /** @type {(function(!Object, !Function): ?|null)} */
  var _ = func;
  /** @type {!Function} */
  var defineProperty = "function" == typeof Object.defineProperties ? Object.defineProperty : function(object, name, descriptor) {
    if (object != Array.prototype && object != Object.prototype) {
      object[name] = descriptor.value;
    }
  };
  addMethods(this);
  /**
   * @return {?}
   */
  F.prototype.toString = function() {
    return this.a;
  };
  (function() {
    /**
     * @param {string} opts
     * @return {?}
     */
    function create(opts) {
      if (this instanceof create) {
        throw new TypeError("Symbol is not a constructor");
      }
      return new F("jscomp_symbol_" + (opts || "") + "_" + widgetUniqueIDIndex++, opts);
    }
    /** @type {number} */
    var widgetUniqueIDIndex = 0;
    return create;
  })();
  /**
   * @param {!Array} url
   * @param {?} input
   * @param {!Array} session
   * @return {?}
   */
  window.__getCssClass = function(url, input, session) {
    input = void 0 === input ? {} : input;
    /** @type {!Array} */
    url = [url];
    if (session) {
      url.push(session);
    }
    /** @type {!Array<?>} */
    session = url.slice();
    var result = require(Object.keys(input));
    var key = result.next();
    for (; !key.done; key = result.next()) {
      key = key.value;
      var val = input[key];
      var rq = require(url);
      var s = rq.next();
      for (; !s.done; s = rq.next()) {
        if (s = s.value, "boolean" == typeof val) {
          if (val) {
            session.push(s + "_" + key);
          }
        } else {
          if ("string" == typeof val) {
            session.push(val ? s + "_" + key + "_" + val : s + "_" + key);
          } else {
            throw Error("modifier '" + key + "' has invalid type");
          }
        }
      }
    }
    return session.join(" ");
  };
  /** @type {number} */
  var nextKey = 0;
  create(textarea, lang);
  /**
   * @param {number} i
   * @param {!Array} parent
   * @return {undefined}
   */
  Unitcell.prototype.remove = function(i, parent) {
    if ((parent = get(this, parent)) && parent) {
      i = parent.indexOf(i);
      if (0 <= i) {
        parent.splice(i, 1);
      }
    }
  };
  create(a, textarea);
  /**
   * @param {string} data
   * @param {string} c
   * @param {number} i
   * @return {undefined}
   */
  a.prototype.add = function(data, c, i) {
    i = void 0 === i ? 0 : i;
    var o = this.a = this.a || new Unitcell;
    data = {
      v : data,
      context : c
    };
    if (0 == i) {
      o.b = o.b || [];
    } else {
      if (o.c = o.c || [0], o.a = o.a || {}, !(i in o.a)) {
        /** @type {!Array} */
        o.a[i] = [];
        c = o.c;
        var fn = void 0;
        /** @type {(function(number, number): ?|undefined)} */
        fn = void 0 === fn ? dispatchEvent : fn;
        /** @type {number} */
        var index = 0;
        var count = c.length;
        for (; index < count;) {
          /** @type {number} */
          var j = index + count >> 1;
          var state = fn(i, c[j]);
          if (0 < state) {
            /** @type {number} */
            index = j + 1;
          } else {
            /** @type {number} */
            count = j;
            /** @type {boolean} */
            var value = !state;
          }
        }
        /** @type {number} */
        value = value ? index : ~index;
        if (0 > value) {
          c.splice(-(value + 1), 0, i);
        }
      }
    }
    if (o = get(o, i)) {
      o.push(data);
    } else {
      call("Priority array values are zero");
    }
  };
  /**
   * @param {number} f
   * @param {?} context
   * @param {?} x
   * @return {undefined}
   */
  a.prototype.remove = function(f, context, x) {
    x = void 0 === x ? 0 : x;
    if (this.a) {
      var a = fn(this.a, x);
      var startLen = a.length;
      /** @type {number} */
      var j = 0;
      for (; j < startLen; ++j) {
        var node = a[j];
        if (node.v == f && node.context == context) {
          /** @type {number} */
          f = j;
          if (x = get(this.a, x)) {
            x.splice(f, 1);
          }
          break;
        }
      }
    } else {
      call("Signal has no handlers!");
    }
  };
  /**
   * @param {?} fn
   * @param {?} context
   * @param {number} data
   * @return {?}
   */
  a.prototype.has = function(fn, context, data) {
    if (!this.a) {
      return false;
    }
    data = fn(this.a, void 0 === data ? 0 : data);
    var tldCount = data.length;
    /** @type {number} */
    var i = 0;
    for (; i < tldCount; ++i) {
      var d = data[i];
      if (d.v == fn && d.context == context) {
        return true;
      }
    }
    return false;
  };
  var client = Function("return this")();
  Object.getPrototypeOf({});
  /**
   * @param {?} event
   * @return {?}
   */
  client.onerror = function(event) {
    /** @type {!Array} */
    var options = [];
    /** @type {number} */
    var a = 0;
    for (; a < arguments.length; ++a) {
      options[a] = arguments[a];
    }
    a = require(options);
    options = a.next().value;
    a.next();
    a.next();
    a.next();
    if (a = a.next().value) {
      error(a);
    } else {
      log(options);
    }
    return true;
  };
  create(Matrix, m);
  /**
   * @param {(!Function|string)} a
   * @param {string} val
   * @param {string} url
   * @param {boolean} type
   * @param {!Object} e
   * @return {?}
   */
  t.prototype.add = function(a, val, url, type, e) {
    var i = a.toString();
    a = this.a[i];
    if (!a) {
      /** @type {!Array} */
      a = this.a[i] = [];
      this.b++;
    }
    var d = f(a, val, type, e);
    if (-1 < d) {
      val = a[d];
      if (!url) {
        /** @type {boolean} */
        val.u = false;
      }
    } else {
      val = new Matrix(val, null, this.c, i, !!type, e);
      /** @type {string} */
      val.u = url;
      a.push(val);
    }
    return val;
  };
  /**
   * @param {string} i
   * @param {number} a
   * @param {boolean} v
   * @param {!Object} d
   * @return {?}
   */
  t.prototype.remove = function(i, a, v, d) {
    i = i.toString();
    if (!(i in this.a)) {
      return false;
    }
    var data = this.a[i];
    a = f(data, a, v, d);
    return -1 < a ? (comparator(data[a]), data.splice(a, 1), 0 == data.length && (delete this.a[i], this.b--), true) : false;
  };
  /** @type {string} */
  var p = "ispring_lm_" + (1E6 * Math.random() | 0);
  var result;
  /**
   * @param {?} y
   * @return {undefined}
   */
  message.prototype.L = function(y) {
    try {
      var white = new FloatRange;
      a: {
        switch(this.T) {
          case "scorm12":
            var o = new ctx(white, true);
            break a;
          case "scorm2004":
            o = new A(true, this.K.P);
            break a;
        }
        throw Error("unknown api version");
      }
      this.a = o;
    } catch (valueProgess) {
      log(valueProgess);
      this.o(y);
    }
    if (this.a) {
      white = this.a;
      o = this.V.bind(this, y);
      y = this.o.bind(this, y);
      white.a = white.g();
      if (white.a) {
        white.a.C(o, y);
      } else {
        y();
      }
    }
  };
  /**
   * @param {?} invalidArgumentCallback
   * @return {undefined}
   */
  message.prototype.V = function(invalidArgumentCallback) {
    var item = this;
    var next_argument = push(callback(this.a)).A();
    invalidArgumentCallback(next_argument ? next_argument : void 0).then(function(snapshotOut) {
      return test(item, snapshotOut);
    });
    /** @type {!Array} */
    this.g = [addEventListener("unload", function() {
      return start(item);
    }), addEventListener("beforeunload", function() {
      return start(item);
    })];
  };
  /**
   * @param {?} a
   * @return {undefined}
   */
  message.prototype.o = function(a) {
    log("Lms initialization failed");
    a().then(function() {
    });
  };
  args = Date.prototype;
  /**
   * @return {?}
   */
  args.i = function() {
    try {
      return "true" == this.a.LMSInitialize("");
    } catch (a) {
    }
    return false;
  };
  /**
   * @param {string} top
   * @return {?}
   */
  args.m = function(top) {
    this.f("cmi.core.exit", top ? "suspend" : "");
    this.h();
    try {
      return "true" == this.a.LMSFinish("");
    } catch (b) {
    }
    return false;
  };
  /**
   * @return {?}
   */
  args.h = function() {
    if (0 == this.b) {
      this.f("cmi.core.exit", this.c ? "suspend" : "");
    }
    try {
      /** @type {boolean} */
      var uiState = "true" == this.a.LMSCommit("");
      this.b += 1;
      return uiState;
    } catch (b) {
    }
    return false;
  };
  /**
   * @param {string} d
   * @return {?}
   */
  args.j = function(d) {
    try {
      return this.a.LMSGetValue(d);
    } catch (b) {
    }
    return "";
  };
  /**
   * @param {string} n
   * @param {string} value
   * @return {?}
   */
  args.f = function(n, value) {
    if ("number" === typeof value) {
      /** @type {string} */
      value = parseFloat(Number(value).toFixed(2)) + "";
    }
    try {
      return "true" == this.a.LMSSetValue(n, value);
    } catch (c) {
    }
    return false;
  };
  args = value.prototype;
  /**
   * @return {?}
   */
  args.i = function() {
    return this.b ? true : this.b = this.a ? this.a.i() : false;
  };
  /**
   * @param {?} m
   * @param {?} x
   * @return {undefined}
   */
  args.C = function(m, x) {
    if (this.b) {
      m();
    } else {
      if (this.a) {
        if (this.b = this.a.i()) {
          m();
        } else {
          x();
        }
      } else {
        /** @type {boolean} */
        this.b = false;
        x();
      }
    }
  };
  /**
   * @param {boolean} date
   * @return {?}
   */
  args.m = function(date) {
    return this.a ? this.a.m(date) : false;
  };
  /**
   * @return {?}
   */
  args.h = function() {
    return this.a ? this.a.h() : false;
  };
  /**
   * @param {string} d
   * @return {?}
   */
  args.j = function(d) {
    return this.a ? this.a.j(d) : "";
  };
  /**
   * @param {string} p
   * @param {string} message
   * @return {?}
   */
  args.f = function(p, message) {
    return this.a ? this.a.f(p, message) : false;
  };
  /**
   * @return {undefined}
   */
  args.w = function() {
  };
  /**
   * @param {number} n
   * @return {undefined}
   */
  args.I = function(n) {
    this.f("cmi.core.session_time", expect(n / 1E3));
  };
  /**
   * @return {?}
   */
  args.A = function() {
    return this.j("cmi.suspend_data");
  };
  /**
   * @param {string} a
   * @return {undefined}
   */
  args.J = function(a) {
    this.f("cmi.suspend_data", a);
  };
  /**
   * @param {boolean} res
   * @param {string} val
   * @return {undefined}
   */
  args.s = function(res, val) {
    if (null === res) {
      if (null === val) {
        this.f("cmi.core.lesson_status", "unknown");
      } else {
        this.f("cmi.core.lesson_status", val ? "completed" : "incomplete");
      }
    } else {
      this.f("cmi.core.lesson_status", res ? "passed" : "failed");
    }
  };
  /**
   * @return {undefined}
   */
  r.prototype.b = function() {
    push(this).m(true);
    click();
  };
  /**
   * @param {boolean} val
   * @param {string} index
   * @return {undefined}
   */
  r.prototype.c = function(val, index) {
    push(this).s(val, index);
  };
  create(ctx, r);
  /**
   * @return {?}
   */
  ctx.prototype.g = function() {
    return new value(this.l);
  };
  /**
   * @param {!Object} z
   * @param {string} c
   * @return {undefined}
   */
  ctx.prototype.c = function(z, c) {
    push(this).s(null, c);
  };
  /**
   * @return {undefined}
   */
  ctx.prototype.b = function() {
    r.prototype.b.call(this);
    click();
  };
  args = Color.prototype;
  /**
   * @return {?}
   */
  args.i = function() {
    try {
      return "true" == this.a.Initialize("");
    } catch (a) {
    }
    return false;
  };
  /**
   * @param {boolean} value
   * @return {?}
   */
  args.m = function(value) {
    this.f("cmi.exit", value ? "suspend" : "normal");
    this.f("adl.nav.request", "exitAll");
    this.h();
    try {
      return "true" == this.a.Terminate("");
    } catch (b) {
    }
    return false;
  };
  /**
   * @return {?}
   */
  args.h = function() {
    if (0 == this.b) {
      this.f("cmi.exit", this.g ? "suspend" : "normal");
    }
    try {
      /** @type {boolean} */
      var uiState = "true" == this.a.Commit("");
      this.b += 1;
      return uiState;
    } catch (b) {
    }
    return false;
  };
  /**
   * @param {string} d
   * @return {?}
   */
  args.j = function(d) {
    try {
      return this.a.GetValue(d);
    } catch (b) {
    }
    return "";
  };
  /**
   * @param {string} n
   * @param {string} value
   * @return {?}
   */
  args.f = function(n, value) {
    if ("number" == typeof value) {
      /** @type {string} */
      value = parseFloat(value.toFixed(7)) + "";
    }
    try {
      return "true" == this.a.SetValue(n, value);
    } catch (c) {
    }
    return false;
  };
  args = BenchmarkImpl.prototype;
  /**
   * @return {?}
   */
  args.i = function() {
    return this.b ? true : this.b = this.a ? this.a.i() : false;
  };
  /**
   * @param {?} m
   * @param {?} x
   * @return {undefined}
   */
  args.C = function(m, x) {
    if (this.b) {
      m();
    } else {
      if (this.a) {
        if (this.b = this.a.i()) {
          m();
        } else {
          x();
        }
      } else {
        /** @type {boolean} */
        this.b = false;
        x();
      }
    }
  };
  /**
   * @param {boolean} date
   * @return {?}
   */
  args.m = function(date) {
    return this.a ? this.a.m(date) : false;
  };
  /**
   * @return {?}
   */
  args.h = function() {
    return this.a ? this.a.h() : false;
  };
  /**
   * @param {string} d
   * @return {?}
   */
  args.j = function(d) {
    return this.a ? this.a.j(d) : "";
  };
  /**
   * @param {string} p
   * @param {string} message
   * @return {?}
   */
  args.f = function(p, message) {
    return this.a ? this.a.f(p, message) : false;
  };
  /**
   * @param {string} t
   * @return {undefined}
   */
  args.w = function(t) {
    this.f("cmi.progress_measure", t);
  };
  /**
   * @param {number} n
   * @return {undefined}
   */
  args.I = function(n) {
    this.f("cmi.session_time", init(n / 1E3));
  };
  /**
   * @return {?}
   */
  args.A = function() {
    return this.j("cmi.suspend_data");
  };
  /**
   * @param {string} a
   * @return {undefined}
   */
  args.J = function(a) {
    if (!this.a) {
      throw Error();
    }
    if (a.length <= ("2" == this.a.c ? 4E3 : 64E3)) {
      this.f("cmi.suspend_data", a);
    }
  };
  /**
   * @param {boolean} res
   * @param {string} val
   * @return {undefined}
   */
  args.s = function(res, val) {
    this.f("cmi.success_status", null === res ? "unknown" : res ? "passed" : "failed");
    this.f("cmi.completion_status", null === val ? "unknown" : val ? "completed" : "incomplete");
  };
  create(A, r);
  /**
   * @return {?}
   */
  A.prototype.g = function() {
    return new BenchmarkImpl(this.l, this.o);
  };
  create(Group, message);
  /** @type {!Array} */
  var remotes = ["iSpring", "roll", "LMS", "create"];
  var output = client;
  if (!(remotes[0] in output || "undefined" == typeof output.execScript)) {
    output.execScript("var " + remotes[0]);
  }
  var i = void 0;
  for (; remotes.length && (i = remotes.shift());) {
    if (remotes.length || void 0 === add) {
      if (output[i] && output[i] !== Object.prototype[i]) {
        output = output[i];
      } else {
        output = output[i] = {};
      }
    } else {
      /** @type {function(!Object): ?} */
      output[i] = add;
    }
  }
  /** @type {function(?): undefined} */
  message.prototype.initialize = message.prototype.L;
}).call(this);
